/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TosRouteImport } from './routes/tos'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SnippetsIndexRouteImport } from './routes/snippets/index'
import { Route as SnippetsNewRouteImport } from './routes/snippets/new'
import { Route as SnippetsIdRouteImport } from './routes/snippets/$id'
import { Route as AuthMeRouteImport } from './routes/auth/me'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AuthProviderCallbackRouteImport } from './routes/auth/$provider/callback'

const TosRoute = TosRouteImport.update({
  id: '/tos',
  path: '/tos',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SnippetsIndexRoute = SnippetsIndexRouteImport.update({
  id: '/snippets/',
  path: '/snippets/',
  getParentRoute: () => rootRouteImport,
} as any)
const SnippetsNewRoute = SnippetsNewRouteImport.update({
  id: '/snippets/new',
  path: '/snippets/new',
  getParentRoute: () => rootRouteImport,
} as any)
const SnippetsIdRoute = SnippetsIdRouteImport.update({
  id: '/snippets/$id',
  path: '/snippets/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthMeRoute = AuthMeRouteImport.update({
  id: '/auth/me',
  path: '/auth/me',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthProviderCallbackRoute = AuthProviderCallbackRouteImport.update({
  id: '/auth/$provider/callback',
  path: '/auth/$provider/callback',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/privacy': typeof PrivacyRoute
  '/tos': typeof TosRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/me': typeof AuthMeRoute
  '/snippets/$id': typeof SnippetsIdRoute
  '/snippets/new': typeof SnippetsNewRoute
  '/snippets': typeof SnippetsIndexRoute
  '/auth/$provider/callback': typeof AuthProviderCallbackRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/privacy': typeof PrivacyRoute
  '/tos': typeof TosRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/me': typeof AuthMeRoute
  '/snippets/$id': typeof SnippetsIdRoute
  '/snippets/new': typeof SnippetsNewRoute
  '/snippets': typeof SnippetsIndexRoute
  '/auth/$provider/callback': typeof AuthProviderCallbackRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/privacy': typeof PrivacyRoute
  '/tos': typeof TosRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/me': typeof AuthMeRoute
  '/snippets/$id': typeof SnippetsIdRoute
  '/snippets/new': typeof SnippetsNewRoute
  '/snippets/': typeof SnippetsIndexRoute
  '/auth/$provider/callback': typeof AuthProviderCallbackRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/privacy'
    | '/tos'
    | '/auth/login'
    | '/auth/me'
    | '/snippets/$id'
    | '/snippets/new'
    | '/snippets'
    | '/auth/$provider/callback'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/privacy'
    | '/tos'
    | '/auth/login'
    | '/auth/me'
    | '/snippets/$id'
    | '/snippets/new'
    | '/snippets'
    | '/auth/$provider/callback'
  id:
    | '__root__'
    | '/'
    | '/privacy'
    | '/tos'
    | '/auth/login'
    | '/auth/me'
    | '/snippets/$id'
    | '/snippets/new'
    | '/snippets/'
    | '/auth/$provider/callback'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PrivacyRoute: typeof PrivacyRoute
  TosRoute: typeof TosRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthMeRoute: typeof AuthMeRoute
  SnippetsIdRoute: typeof SnippetsIdRoute
  SnippetsNewRoute: typeof SnippetsNewRoute
  SnippetsIndexRoute: typeof SnippetsIndexRoute
  AuthProviderCallbackRoute: typeof AuthProviderCallbackRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tos': {
      id: '/tos'
      path: '/tos'
      fullPath: '/tos'
      preLoaderRoute: typeof TosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/snippets/': {
      id: '/snippets/'
      path: '/snippets'
      fullPath: '/snippets'
      preLoaderRoute: typeof SnippetsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/snippets/new': {
      id: '/snippets/new'
      path: '/snippets/new'
      fullPath: '/snippets/new'
      preLoaderRoute: typeof SnippetsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/snippets/$id': {
      id: '/snippets/$id'
      path: '/snippets/$id'
      fullPath: '/snippets/$id'
      preLoaderRoute: typeof SnippetsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/me': {
      id: '/auth/me'
      path: '/auth/me'
      fullPath: '/auth/me'
      preLoaderRoute: typeof AuthMeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/$provider/callback': {
      id: '/auth/$provider/callback'
      path: '/auth/$provider/callback'
      fullPath: '/auth/$provider/callback'
      preLoaderRoute: typeof AuthProviderCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PrivacyRoute: PrivacyRoute,
  TosRoute: TosRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthMeRoute: AuthMeRoute,
  SnippetsIdRoute: SnippetsIdRoute,
  SnippetsNewRoute: SnippetsNewRoute,
  SnippetsIndexRoute: SnippetsIndexRoute,
  AuthProviderCallbackRoute: AuthProviderCallbackRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
